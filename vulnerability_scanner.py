import requests
import nmap

# Configuração de proxy Tor (opcional)
proxies = {
    'http': 'socks5h://127.0.0.1:9050',
    'https': 'socks5h://127.0.0.1:9050',
}

# Função para explorar arquivos e diretórios sensíveis automaticamente
def explorar_arquivos_sensiveis(url):
    print("\nExplorando arquivos e diretórios sensíveis no servidor...")
    
    # Lista de arquivos e diretórios sensíveis comuns em servidores web
    arquivos_sensiveis = [
        '/admin/',
        '/manager/',
        '/uploads/',
        '/private/',
        'db_config.php/',
        'database.yml',
        'settings.py',
        'httpd.conf',
        'nginx.conf',
        '.htaccess',
        'wp-config.php',
        '.ssh/id_rsa',
        'login/', 
        'config.php', 
        'db.sql', 
        '.env', 
        'wp-config.php', 
        'backup/', 
        'logs/', 
        'private/', 
        'tmp/', 
        'debug.log',
        '.git/',  # Verifica se o repositório Git está exposto
        '.svn/',  # Verifica se o repositório SVN está exposto
        'backup.zip',  # Arquivo de backup compactado
        'source.zip',  # Código-fonte compactado
        'source.tar.gz',  # Código-fonte compactado em tar.gz
        'index.php~',  # Arquivos temporários com código-fonte
        'appsettings.json',  # Configuração de aplicativos .NET
        'web.config',  # Configuração de web apps no Windows
    ]
    
    for arquivo in arquivos_sensiveis:
        try:
            # Usando HTTP (porta 80) para acessar o servidor
            arquivo_url = f"{url}/{arquivo}".replace('https://', 'http://')
            response = requests.get(arquivo_url, timeout=60)  # Timeout ajustado para 60 segundos
            status = response.status_code
            print(f"Explorando: {arquivo} - Código de Status: {status}")
            
            if status == 200:
                print(f"ALERTA: Conteúdo encontrado em {arquivo}. O código pode estar exposto!")
                print(response.text[:500] + '...')  # Exibe o início do conteúdo do arquivo
            else:
                print(f"Falha ao acessar {arquivo} - Status: {status}")
        
        except requests.RequestException as e:
            print(f"Erro ao acessar {arquivo}: {e}")

    print("Exploração de arquivos e diretórios sensíveis concluída.\n")

# Função para verificar headers de segurança HTTP (configuração insegura)
def verificar_headers_de_seguranca(url):
    print("\nVerificando headers de segurança HTTP no servidor...")
    
    try:
        response = requests.get(url, timeout=60)
        headers = response.headers

        # Verificação de headers de segurança comuns e exibição de avisos detalhados
        if 'X-Frame-Options' not in headers:
            print("Aviso: O header 'X-Frame-Options' está ausente.")
            print("Explicação: Este header impede que o site seja carregado em frames de outros sites, protegendo contra ataques de Clickjacking.\n")
        
        if 'Content-Security-Policy' not in headers:
            print("Aviso: O header 'Content-Security-Policy' está ausente.")
            print("Explicação: Este header ajuda a prevenir ataques de Cross-Site Scripting (XSS) e injeção de conteúdo, limitando de onde scripts podem ser carregados.\n")
        
        if 'Strict-Transport-Security' not in headers:
            print("Aviso: O header 'Strict-Transport-Security' está ausente.")
            print("Explicação: Este header instrui o navegador a sempre usar HTTPS, mesmo se o usuário tentar acessar a versão HTTP do site. Sua ausência pode levar a ataques de downgrade de HTTPS para HTTP.\n")
        
        if 'X-Content-Type-Options' not in headers:
            print("Aviso: O header 'X-Content-Type-Options' está ausente.")
            print("Explicação: Este header impede que navegadores interpretem arquivos de maneira incorreta, prevenindo ataques de MIME sniffing.\n")
        
        print("Verificação de headers de segurança concluída.\n")
    
    except requests.RequestException as e:
        print(f"Erro ao verificar headers de segurança: {e}")

# Função para verificar comportamentos inseguros no aplicativo (projeto e comportamento falhos)
def verificar_comportamentos_inseguros(url):
    print("\nVerificando comportamentos inseguros no servidor...")
    
    # Lista de URLs que podem representar falhas de design ou comportamento do aplicativo
    urls_inseguras = [
        'admin/', 
        'login/', 
        'dashboard/', 
        'wp-admin/', 
        'phpmyadmin/',  # Diretórios administrativos comuns
        'test/', 
        'old/', 
        'backup/'  # Diretórios de testes e backups
    ]
    
    for url_insegura in urls_inseguras:
        try:
            url_completa = f"{url}/{url_insegura}".replace('https://', 'http://')
            response = requests.get(url_completa, timeout=60)
            status = response.status_code
            print(f"Verificando: {url_insegura} - Código de Status: {status}")
            
            if status == 200:
                print(f"Acesso não autorizado encontrado em {url_insegura} - Potencial falha de design ou comportamento!")
            else:
                print(f"Sem acesso em {url_insegura} - Status: {status}")
        
        except requests.RequestException as e:
            print(f"Erro ao acessar {url_insegura}: {e}")
    
    print("Verificação de comportamentos inseguros concluída.\n")

# Função para escanear vulnerabilidades no servidor web usando Nmap
def escanear_vulnerabilidades_com_nmap(target, base_url):
    print("\nIniciando scan detalhado de vulnerabilidades com nmap...")
    nm = nmap.PortScanner()
    
    try:
        # Usar scripts NSE para detectar vulnerabilidades em servidores web
        nm.scan(target, arguments='-p 80 --script "http-enum,http-sql-injection,http-config-backup,http-vuln-cve2014-3704"')
        
        for host in nm.all_hosts():
            print(f'Host: {host} ({nm[host].hostname()})')
            print(f'Estado: {nm[host].state()}')
            for proto in nm[host].all_protocols():
                print('----------')
                print(f'Protocolo: {proto}')
                lport = nm[host][proto].keys()
                for port in lport:
                    print(f'Porta: {port}\tEstado: {nm[host][proto][port]["state"]}')
                    
                    # Verificar scripts executados e seus resultados
                    if 'script' in nm[host][proto][port]:
                        for script_name, output in nm[host][proto][port]['script'].items():
                            print(f'Script: {script_name}\nResultado:\n{output}')
                            
                            # Se vulnerabilidade for encontrada, tentar explorar arquivos sensíveis
                            if 'http-enum' in script_name or 'http-config-backup' in script_name:
                                print("Vulnerabilidade encontrada! Tentando explorar arquivos sensíveis...")
                                explorar_arquivos_sensiveis(base_url)
    
    except Exception as e:
        print(f"Erro ao escanear vulnerabilidades: {e}")
    
    print("Scan de vulnerabilidades com nmap finalizado.\n")

# Função principal para executar o scanner de vulnerabilidades
def main():
    print("=== Iniciando scanner de vulnerabilidades ===")
    
    # Definir o URL do site alvo
    BASE_URL = 'https://www.sim.com.br/'  # Usando HTTP (pode ajustar conforme necessário)
    TARGET_IP = '172.0.0.1'  # IP alvo para varredura Nmap

    # Explorar arquivos sensíveis no servidor
    explorar_arquivos_sensiveis(BASE_URL)
    
    # Verificar headers de segurança HTTP
    verificar_headers_de_seguranca(BASE_URL)

    # Verificar comportamentos inseguros no aplicativo
    verificar_comportamentos_inseguros(BASE_URL)

    # Escanear vulnerabilidades com Nmap
    escanear_vulnerabilidades_com_nmap(TARGET_IP, BASE_URL)

    print("=== Scanner de vulnerabilidades concluído ===")

if __name__ == "__main__":
    main()
